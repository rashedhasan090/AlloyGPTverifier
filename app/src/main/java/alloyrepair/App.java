/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package alloyrepair;

import edu.mit.csail.sdg.alloy4.A4Reporter;
import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorWarning;
import edu.mit.csail.sdg.alloy4compiler.ast.*;
import edu.mit.csail.sdg.alloy4compiler.parser.CompUtil;
import edu.mit.csail.sdg.alloy4compiler.translator.A4Options;
import edu.mit.csail.sdg.alloy4compiler.translator.A4Solution;
import edu.mit.csail.sdg.alloy4compiler.translator.TranslateAlloyToKodkod;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.*;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;

import java.io.FileWriter;
import java.io.IOException;

public class App {
    Module root = null;
    A4Solution ans = null;
    protected String result;
    protected ArrayList<String> resultsArray = new ArrayList<String>();
    static int solutionNo = 1;
    static int maxSol = 10000000;

    private Gson gson;
    private JsonObject jsonReport;
    private static List<String> warnings = new ArrayList<>();

    FileOutputStream oFile;
    static PrintStream pPRINT = null;

    HashMap<String, String> uniqueSkolems;
    HashMap<String, HashSet<String>> skolemsHashMAp;
    HashMap<String, Integer> src, dst, intents, perm;

    // [src-dst,Sol#]
    HashMap<String, HashSet<String>> distinctSrcDst;

    public App() {
        jsonReport = JsonHelper.createJsonObject("", "", "", "", "", "", "");
        gson = new GsonBuilder().disableHtmlEscaping().setPrettyPrinting().create();
    }

    public void addCounterexample(String cntrCmd, String counterexample, String counterexampleMsg) {
        JsonHelper.addCounterexample(jsonReport, cntrCmd, counterexample, counterexampleMsg);
    }

    public void addInstance(String instanceCmd, String instances, String instanceMsg) {
        JsonHelper.addInstance(jsonReport, instanceCmd, instances, instanceMsg);
    }

    public void updateError(String errorMessage) {
        jsonReport.addProperty("error", errorMessage);
    }

    public JsonObject getMyJson() {
        return jsonReport;
    }

    public void writeJsonToFile(String fileName) {
        try (FileWriter writer = new FileWriter(fileName)) {
            gson.toJson(jsonReport, writer);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void updateErrorWithStackTrace(Exception err) {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        err.printStackTrace(pw);
        String stackTrace = sw.toString(); // Stack trace as a string
        jsonReport.addProperty("error", stackTrace);
    }

    /**
     * This object performs expression evaluation.
     *
     * @param args AlloyFile Query
     */

    public static void main(String args[]) throws FileNotFoundException {
        String als_path = args[0];
        String reportFile = als_path.substring(0, als_path.length() - 4);

        App e = new App();

        try {
            e.callAlloyEngine(als_path);
            e.writeJsonToFile(reportFile + "_alloyAnalyzerReport.json");
        } catch (Exception err) {
            // err.printStackTrace();
            e.updateErrorWithStackTrace(err);
            e.writeJsonToFile(reportFile + "_alloyAnalyzerReport.json");
        }
    }

    public void callAlloyEngine(String model) throws Err, FileNotFoundException {
        uniqueSkolems = new HashMap<String, String>();
        skolemsHashMAp = new HashMap<String, HashSet<String>>();

        src = new HashMap<String, Integer>();
        dst = new HashMap<String, Integer>();
        intents = new HashMap<String, Integer>();
        perm = new HashMap<String, Integer>();

        distinctSrcDst = new HashMap<String, HashSet<String>>();

        A4Reporter rep = new A4Reporter() {
            @Override
            public void warning(ErrorWarning msg) {
                String warningText = "Warning " + msg.toString().trim();
                if (warningText.contains(model)) {
                    // Replace the model path with "the specification"
                    warningText = warningText.replace(model, "the specification");
                }
                warnings.add(warningText);
            }
        };
        root = CompUtil.parseEverything_fromFile(rep, null, model);

        String warningsConcatenated = String.join(" ", warnings);
        updateError(warningsConcatenated);

        A4Options options = new A4Options();
        options.solver = A4Options.SatSolver.SAT4J; // .KK;//.MiniSatJNI; //.MiniSatProverJNI;//.SAT4J;
        options.symmetry = 20;
        options.skolemDepth = 1;

        // long now, start = System.currentTimeMillis();
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        // Date startTime = new Date(start);

        for (Command command : root.getAllCommands()) {
            if (command.toString().contains("Check")) {
                String cntr_cmd, counterexample, counterexample_msg;
                cntr_cmd = command.toString();
                try {
                    ans = TranslateAlloyToKodkod.execute_command(rep, root.getAllReachableSigs(), command, options);
                } catch (Err err) {
                    err.printStackTrace();
                }
                for (ExprVar a : ans.getAllAtoms()) {
                    root.addGlobal(a.label, a);
                }
                for (ExprVar a : ans.getAllSkolems()) {
                    root.addGlobal(a.label, a);
                }

                if (ans.satisfiable()) {
                    counterexample = "Yes";

                    StringBuilder sb = new StringBuilder();
                    for (Sig sig : ans.getAllReachableSigs()) {
                        if (sig.builtin)
                            continue;
                        sb.append(sig).append("=").append(ans.eval(sig)).append("\n");

                        // Iterate over the fields of each signature
                        for (Sig.Field field : sig.getFields()) {
                            // Print the tuple set for each field
                            sb.append(sig).append(".").append(field.label).append("=").append(ans.eval(field))
                                    .append("\n");
                        }
                    }
                    counterexample_msg = "Counterexample found which means that " + command + " assertion is invalid\n"
                            + sb;
                } else {
                    counterexample = "no";
                    counterexample_msg = "Counterexample not found which means that " + command + " is valid";
                }
                addCounterexample(cntr_cmd, counterexample, counterexample_msg);
            } else if (command.toString().contains("Run")) {
                String instance_cmd, instance, instance_msg;
                instance_cmd = command.toString();
                try {
                    ans = TranslateAlloyToKodkod.execute_command(rep, root.getAllReachableSigs(), command, options);
                } catch (Err err) {
                    err.printStackTrace();
                }
                for (ExprVar a : ans.getAllAtoms()) {
                    root.addGlobal(a.label, a);
                }
                for (ExprVar a : ans.getAllSkolems()) {
                    root.addGlobal(a.label, a);
                }

                if (ans.satisfiable()) {
                    instance = "Yes";
                    instance_msg = "Instance found which means that the specification is consistent";
                } else {
                    instance = "No";
                    instance_msg = "Instance not found which means that the specification is not consistent.";
                }
                addInstance(instance_cmd, instance, instance_msg);
            }
        }
    }
}