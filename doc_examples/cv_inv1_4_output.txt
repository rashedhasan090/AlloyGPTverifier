
Executing command [Check inv1_Repaired] of the Alloy model cv_inv1_4.als, Alloy analyzer found a counterexample,
Indicating assert inv1_Repaired is violated by this counterexample:



User={User0, User1}
User.profile={User1->Work0, User1->Work1, User1->Work2}
User.visible={User1->Work0, User1->Work1, User1->Work2}
Institution={}
Source={User0, User1}
Id={Id0, Id1}
Work={Work0, Work1, Work2}
Work.ids={Work0->Id0, Work0->Id1, Work1->Id0, Work1->Id1, Work2->Id0, Work2->Id1}
Work.source={Work0->User1, Work1->User0, Work2->User0}
Executing command [Check inv2_Repaired] of Alloy model cv_inv1_4.als, Alloy analyzer found no counterexample,

indicating assert inv2_Repaired is valid.



Executing command [Check inv3_Repaired] of Alloy model cv_inv1_4.als, Alloy analyzer found no counterexample,

indicating assert inv3_Repaired is valid.



Executing command [Check repair_assert_1] of the Alloy model cv_inv1_4.als, Alloy analyzer found a counterexample,
Indicating assert repair_assert_1 is violated by this counterexample:



User={User0, User1}
User.profile={User1->Work0, User1->Work1, User1->Work2}
User.visible={User1->Work0, User1->Work1, User1->Work2}
Institution={}
Source={User0, User1}
Id={Id0, Id1}
Work={Work0, Work1, Work2}
Work.ids={Work0->Id0, Work0->Id1, Work1->Id0, Work1->Id1, Work2->Id0, Work2->Id1}
Work.source={Work0->User1, Work1->User0, Work2->User0}

Executing command [Run repair_pred_1] of Alloy model cv_inv1_4.als, Alloy analyzer generates a valid instance,
indicating the model is consistent and pred repair_pred_1 is satisfied.




Executing command [Check inv1_Repaired] of the Alloy model cv_inv1_4.als, Alloy analyzer found a counterexample,
Indicating assert inv1_Repaired is violated by this counterexample:



User={User0, User1}
User.profile={User1->Work0, User1->Work1, User1->Work2}
User.visible={User1->Work0, User1->Work1, User1->Work2}
Institution={}
Source={User0, User1}
Id={Id0, Id1}
Work={Work0, Work1, Work2}
Work.ids={Work0->Id0, Work0->Id1, Work1->Id0, Work1->Id1, Work2->Id0, Work2->Id1}
Work.source={Work0->User1, Work1->User0, Work2->User0}
Executing command [Check inv2_Repaired] of Alloy model cv_inv1_4.als, Alloy analyzer found no counterexample,

indicating assert inv2_Repaired is valid.



Executing command [Check inv3_Repaired] of Alloy model cv_inv1_4.als, Alloy analyzer found no counterexample,

indicating assert inv3_Repaired is valid.



Executing command [Check repair_assert_1] of the Alloy model cv_inv1_4.als, Alloy analyzer found a counterexample,
Indicating assert repair_assert_1 is violated by this counterexample:



User={User0, User1}
User.profile={User1->Work0, User1->Work1, User1->Work2}
User.visible={User1->Work0, User1->Work1, User1->Work2}
Institution={}
Source={User0, User1}
Id={Id0, Id1}
Work={Work0, Work1, Work2}
Work.ids={Work0->Id0, Work0->Id1, Work1->Id0, Work1->Id1, Work2->Id0, Work2->Id1}
Work.source={Work0->User1, Work1->User0, Work2->User0}

Executing command [Run repair_pred_1] of Alloy model cv_inv1_4.als, Alloy analyzer generates a valid instance,
indicating the model is consistent and pred repair_pred_1 is satisfied.



